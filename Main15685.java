import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

/*
 * Baekjoon Online Judge 15685번 - 드래곤 커브
 * 
 * 드래곤 커브는 다음과 같은 세 가지 속성으로 이루어져 있으며, 이차원 좌표 평면 위에서 정의된다. 좌표 평면의 x축은 → 방향, y축은 ↓ 방향이다.
 * 시작 점
 * 시작 방향
 * 세대
 * 0세대 드래곤 커브는 아래 그림과 같은 길이가 1인 선분이다. 아래 그림은 (0, 0)에서 시작하고, 시작 방향은 오른쪽인 0세대 드래곤 커브이다.
 * 1세대 드래곤 커브는 0세대 드래곤 커브를 끝 점을 기준으로 시계 방향으로 90도 회전시킨 다음 0세대 드래곤 커브의 끝 점에 붙인 것이다. 끝 점이란 시작 점에서 선분을 타고 이동했을 때, 가장 먼 거리에 있는 점을 의미한다.
 * 2세대 드래곤 커브도 1세대를 만든 방법을 이용해서 만들 수 있다. (파란색 선분은 새로 추가된 선분을 나타낸다)
 * 3세대 드래곤 커브도 2세대 드래곤 커브를 이용해 만들 수 있다. 아래 그림은 3세대 드래곤 커브이다.
 * 즉, K(K > 1)세대 드래곤 커브는 K-1세대 드래곤 커브를 끝 점을 기준으로 90도 시계 방향 회전 시킨 다음, 그것을 끝 점이 붙인 것이다.
 * 크기가 100×100인 격자 위에 드래곤 커브가 N개 있다. 이때, 크기가 1×1인 정사각형의 네 꼭짓점이 모두 드래곤 커브의 일부인 정사각형의 개수를 구하는 프로그램을 작성하시오. 격자의 좌표는 (x, y)로 나타내며, 0 ≤ x ≤ 100, 0 ≤ y ≤ 100만 유효한 좌표이다.
 * 
 *
 */

public class Main15685 {

	static int[][] map = new int[101][101];

	static void solve(int x, int y, int d, int g) {

		ArrayList<Integer> listX = new ArrayList<Integer>();
		ArrayList<Integer> listY = new ArrayList<Integer>();
		listX.add(x);
		listY.add(y);

		map[listY.get(0)][listX.get(0)] = 1;

		if (d == 0) {
			listX.add(x + 1);
			listY.add(y);
		} else if (d == 1) {
			listX.add(x);
			listY.add(y - 1);

		} else if (d == 2) {
			listX.add(x - 1);
			listY.add(y);

		} else if (d == 3) {
			listX.add(x);
			listY.add(y + 1);
		}
		map[listY.get(1)][listX.get(1)] = 1; 

		for (int i = 0; i < g; i++) {
			check(listX, listY);
		}
	}

	static void check(ArrayList<Integer> listX, ArrayList<Integer> listY) {

		int endX = listX.get(listX.size() - 1);
		int endY = listY.get(listY.size() - 1); 
		int length = listX.size() - 2;

		for (int j = length; j >= 0; j--) {

			int tempX = listX.get(j) - endX; 
			int tempY = listY.get(j) - endY;

			if (tempX + endY >= 0 && -tempY + endX >= 0 && tempX + endY <= 100 && -tempY + endX <= 100) {
				map[tempX + endY][-tempY + endX] = 1;
				listX.add(-tempY + endX);
				listY.add(tempX + endY);
			}

		}

	}

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int N = Integer.parseInt(br.readLine());
		int[] x = new int[N];
		int[] y = new int[N];
		int[] d = new int[N];
		int[] g = new int[N];

		for (int i = 0; i < N; i++) {
			String[] input = br.readLine().split(" ");
			x[i] = Integer.parseInt(input[0]);
			y[i] = Integer.parseInt(input[1]);
			d[i] = Integer.parseInt(input[2]);
			g[i] = Integer.parseInt(input[3]);
		}

		for (int i = 0; i < N; i++) {
			solve(x[i], y[i], d[i], g[i]);
		}

		int count = 0;
		for (int i = 0; i < 100; i++) {
			for (int j = 0; j < 100; j++) {
				
				if (map[i][j] == 1 && map[i + 1][j] == 1 && map[i][j + 1] == 1 && map[i + 1][j + 1] == 1)
					count++;
			}
			
		}

		System.out.println(count);
	}

}
